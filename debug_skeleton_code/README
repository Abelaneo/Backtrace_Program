x86-64 Stack Backtrace & Register-Dump Library
Course / Assignment – CS271, Debugging: Walking the Stack (Final Project)
Author – Oscar Abelanet


Project Overview:
This library provides two debugging functions implemented partly in C and partly in x86-64 assembly:

Functions
void dump_registers(void):	Prints the contents of the integer general-purpose registers (rax, rbx, …, r15) in decimal and hexadecimal.
void dump_backtrace(void):	Walks the frame-pointer chain (rbp) to print a symbolic stack backtrace using dladdr for symbol resolution.


Directory Layout:
.
├── include/
│   └── debug.h            # Public interface
├── src/
|   ├── asm/
│      ├── dump_regs.s     # Assembly for dump_registers
│      └── backtrace.s     # Assembly for dump_backtrace frame walk
│   └── debug.c             # C helpers that wrap printf & dladdr
├── test/
│   └── main.c             # Example driver (used for grading)
├── lib/                   # (Left empty – `make` builds here)
├── README.md              # This file
└── Makefile               # Build script (provided)


Building:
The supplied Makefile will correctly build the program with these commands:
# Build static library lib/libdebug.a
make       


Example Output:
This would be the example output for the given file in test/:
rax    42 (0x2a)
rbx    0 (0x0)
rcx    4 (0x4)
rdx    3 (0x3)
rsi    2 (0x2)
rdi    1 (0x1)
rbp    140721147591600 (0x7ffc3203bbb0)
rsp    140721147591568 (0x7ffc3203bb90)
r8     5 (0x5)
r9     6 (0x6)
r10    140721147590928 (0x7ffc3203b910)
r11    515 (0x203)
r12    140721147591928 (0x7ffc3203bcf8)
r13    1 (0x1)
r14    125415370539008 (0x72108a9c4000)
r15    102788977790424 (0x5d7c6c820dd8)

  0: [5d7c6c81e149] g () ./main
  1: [5d7c6c81e17d] f () ./main
  2: [5d7c6c81e1ae] main () ./main
  3: [0] (null) () /usr/lib/libc.so.6
  4: [72108a76e6e0] __libc_start_main () /usr/lib/libc.so.6
  5: [5d7c6c81e050] _start () ./main
